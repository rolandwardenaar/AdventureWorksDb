@page "/products"
@using MudBlazor
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Products</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid Spacing="3">
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Product Management</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudDataGrid T="ProductListDto" 
                         Items="@products" 
                         ServerData="LoadServerData"
                         Sortable="true" 
                         Filterable="true"
                         Pageable="true"
                         PageSize="10"
                         Dense="true"
                         Striped="true"
                         Hover="true">
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <PropertyColumn Property="x => x.ProductNumber" Title="Product Number" />
                    <PropertyColumn Property="x => x.ListPrice" Title="Price" Format="C" />
                    <PropertyColumn Property="x => x.CategoryName" Title="Category" />
                    <PropertyColumn Property="x => x.SubcategoryName" Title="Subcategory" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToDetails(context.Item.ProductId)">Details</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => NavigateToEdit(context.Item.ProductId)">Edit</MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ProductListDto> products = new();

    private async Task<GridData<ProductListDto>> LoadServerData(GridState<ProductListDto> state)
    {
        try
        {
            var products = await ProductService.GetAllProductsAsync();
            return new GridData<ProductListDto>
            {
                Items = products,
                TotalItems = products.Count()
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading products: {ex.Message}", Severity.Error);
            return new GridData<ProductListDto>
            {
                Items = new List<ProductListDto>(),
                TotalItems = 0
            };
        }
    }

    private void NavigateToDetails(int productId)
    {
        Navigation.NavigateTo($"/products/details/{productId}");
    }

    private void NavigateToEdit(int productId)
    {
        Navigation.NavigateTo($"/products/edit/{productId}");
    }
}
